# keychain
# keychain --eval --lockwait 45 --quick \
# ~/Documents/bunker/pwet

# kubectl bash_completion
# source <(kubectl completion bash)

# govc / vsphere
#. ~/Documents/bunker/.govc

# tmux
# if not running interactively, do not do anything
#[[ $- != *i* ]] && return
#[[ -z "$TMUX" ]] && exec tmux -2 -u

# tilix vte
if [[ "$TILIX_ID" ]] || [[ "$VTE_VERSION" ]]; then
  source /etc/profile.d/vte.sh
fi

# aliases
alias cat='bat --plain --paging never'
alias dotadd='chezmoi add'
alias dotdir='cd ~/.local/share/chezmoi'
alias kubelog='stern'
alias kubelogs='kubelog'
alias l='ls -CF'
alias la='ls -A'
alias less='bat --color always --decorations always'
alias ll='ls -alF'
alias meteo='curl -s https://wttr.in/Lyon'
alias myip='curl -s https://api.ipify.org; echo;'
alias pingtcp='nping'
alias pip='pip3'
alias skynet='ansible-playbook'

# functions
amqt() {
  curl -s https://amp.cloudflare.com/q/${1} | jq;
}

# ecdsa key
genecdsa() {
  openssl ecparam -name prime256v1 -genkey -out $1;
}
# csr req
# optional subjectAltName if needed
# -subj
# "/C=US/ST=NY/L=NYC/O=Alphabet/OU=Google/
# CN=*.google.com/subjectAltName=DNS.1=google.com/
# emailAddress=infra@google.com"
gencsr() {
  openssl req -new -nodes -sha256 -key $1.key -out $2.csr;
}

# x509 ecdsa self-signed cert with sha256 mac
gencrt() {
 genecdsa selfkey.pem && \
 openssl req -x509 -days 1095 -nodes \
  -sha256 -new -key selfkey.pem -out selfcert.pem;
}

# csr req details
infocsr() { openssl req -noout -text -in $1; }

# ecdsa key details
infoeck() { openssl ec -in $1 -text -noout; }

# x509 cert details
infocrt() { openssl x509 -in $1 -noout -text; }

# web stream download
tvdl() {
  youtube-dl $1 -f '[width=?640]' \
    --max-filesize 1536M --referer "http://www.arte.tv" \
    --user-agent "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/33.0.1750.166 Safari/537.36 OPR/20.0.1396.73172";
}

# fuse mount of hubic
hubicmount() {
  hubicfuse /mnt/hubic -o noauto_cache,sync_read,noatime,nodev,noexec;
}

# file sync with hubic
hubicsync() {
 if [[ -d /mnt/hubic ]]; then
  rsync -avhc --max-size=100M --inplace "${1}" "${2}"
 else
  echo "hubicfuse unmounted. rsync impossible."
  exit 1
 fi
}

# ansible helpers
skynetGo() {
 if [[ -n "${1}" ]]; then
  echo -e "\n...Starting Ansible play : ${1}\nChecking the syntax\n";
  skynet -vv --syntax-check "${1}";
  echo -e "\nPress a key to continue...\n";
  read;
  echo -e "Running Ansible play : ${1}";
  skynet -Dv "${1}";
  echo -e "\nDone.\n";
 fi
}

skynetTest() {
 if [[ -n "${1}" ]]; then
  echo -e "\n...Starting Ansible play : ${1}\nChecking the syntax\n";
  skynet -vv --syntax-check "${1}";
  echo -e "\nPress a key to continue...\n";
  read;
  echo -e "Show Ansible play diff (check mode) : ${1}";
  skynet -CD "${1}";
  echo -e "\nDone.\n";
 fi
}

# wireguard helpers
wgvpnup() {
# client
crts_path="~/Documents/bunker/certs"

if [[ ! -e ${crts_path}/wgd-private-key ]]; then
  wg genkey>${crts_path}/wgd-private-key
  echo "Get the pre-shared keys (wgd-preshared-key) on the server side"
fi

sudo bash -c "
  crts_path="${HOME}/Documents/bunker/certs"
  ip link add dev wg0 type wireguard
  ip address add 192.168.150.2/24 dev wg0
  wg set wg0 listen-port 57932 private-key "${crts_path}/wgd-private-key"
  wg set wg0 peer "uberBase64"\
    preshared-key "${crts_path}/wgd-preshared-key"\
    allowed-ips "0.0.0.0/0"\
    endpoint "1.2.3.4:57932"\
    persistent-keepalive 120
  ip link set up dev wg0
  # use the true default route to access wireguard server
  gw=$(ip route | grep -oP 'default\Wvia.*wlp58s0' | sed 's/default/1.2.3.4/g')
  ip route add ${gw}
  # route all the trafic through wireguard int
  ip route add 0.0.0.0/0 via 192.168.150.1 dev wg0
"
}

wgvpndn() {
sudo ip link delete wg0
sudo ip route del 0.0.0.0/0 via 192.168.150.1 dev wg0
}

# vmware govc
vmwareSearchByIp () {
  [[ ${#} == 1 ]] || { echo 'Syntax error, only one argument (IP) allowed'; return; }
  govc vm.info -vm.ip ${1}
}

vmwareSearchByName () {
  [[ ${#} == 1 ]] || { echo 'Syntax error, only one argument (DNS) allowed'; return; }
  govc vm.info -vm.dns ${1}
}

# tilix configuration helpers
backupTilixConfig () {
  type tilix &>/dev/null || { echo 'Tilix not installed, quitting'; return; }
  dconf dump /com/gexperts/Tilix/ > ~/.config/tilix/tilix.conf
}

restoreTilixConfig () {
  type tilix &>/dev/null || { echo 'Tilix not installed, quitting'; return; }
  dconf load /com/gexperts/Tilix/ < ~/.config/tilix/tilix.conf
}

# gpg
gpgExport () {
  [[ ${#} == 1 ]] || { echo 'Syntax error, only one argument (key ID) allowed'; return; }
  gpg --list-key && echo
  gpg --armor --export ${1}
}

# qemu
qemuRun () {
  local _ARCH="x86_64"
  local _ACCEL="kvm:tcg"
  local _RAM="1G"
  local _DRIVE="${1}"
  local _KEYMAP="en-us"
  local _DISPLAY="gtk"

  sudo qemu-system-${_ARCH} \
    -boot once="d",menu=on,splash-time=10000 \
    -drive file=${_DRIVE},if=virtio,cache=writeback,discard=ignore,format=qcow2,detect-zeroes=off \
    -accel "${_ACCEL} \
    -m "${_RAM} \
    -k ${_KEYMAP} \
    -display ${_DISPLAY} \
    -name "QEMU-${_DRIVE}"
}

# extraction helper
extract () {
  if [[ -f ${1} ]]; then
    case ${1} in
      *.tar.bz2)   tar xjvf $1    ;;
      *.tar.gz)    tar xzvf $1    ;;
      *.bz2)       bunzip2 $1     ;;
      *.rar)       unrar e $1     ;;
      *.gz)        gunzip $1      ;;
      *.tar)       tar xvf $1     ;;
      *.tbz2)      tar xjvf $1    ;;
      *.tgz)       tar xzvf $1    ;;
      *.zip)       unzip $1       ;;
      *.Z)         uncompress $1  ;;
      *.7z)        7z x $1        ;;
      *)           echo "'$1' cannot be extracted via extract()" ;;
    esac
  else
    echo "'$1' is not a valid file"
  fi
}

# nmcli wifi
nmcliWifiList () {
  nmcli device wifi rescan
  nmcli device wifi list
}

nmcliWifiConnect () {
  nmcli con add con-name "${1}" ifname wlp3s0 type wifi ssid "${1}" \
    autoconnect yes ipv4.dns "9.9.9.9,1.1.1.1"
  nmcli con modify ${1} wifi-sec.key-mgmt wpa-psk
  nmcli con modify ${1} wifi-sec.psk ${2}
  nmcli con show
  nmcli con up ${1}
}
